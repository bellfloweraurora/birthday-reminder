package com.carrot.timeode.service.impl;import cn.hutool.core.collection.CollUtil;import com.carrot.timeode.domain.Relationship;import com.carrot.timeode.domain.ReminderPlan;import com.carrot.timeode.mapper.ReminderPlanMapper;import com.carrot.timeode.service.IRelationshipService;import com.carrot.timeode.service.IReminderPlanService;import com.carrot.timeode.vo.ResponseEntity;import jakarta.annotation.Resource;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.time.LocalDate;import java.util.ArrayList;import java.util.List;@Servicepublic class ReminderPlanService implements IReminderPlanService {    @Resource    private ReminderPlanMapper mapper;    @Override    public Boolean plan(Relationship ship) {        Boolean reminderEnabled = ship.getReminderEnabled();        //前端不校验的情况预防空指针        if (!Boolean.TRUE.equals(reminderEnabled)) {            return true;        }        //计算提醒计划        LocalDate birthday = ship.getBirthday();        List<Integer> daysBefore = ship.getDaysBefore();        //当前的生日        LocalDate now = LocalDate.now();        LocalDate currentBirthday = birthday.withYear(LocalDate.now().getYear());        List<ReminderPlan> plans = new ArrayList<>();        for (Integer bf : daysBefore) {            LocalDate data = currentBirthday.minusDays(bf);            if (data.isBefore(now)) {                //下一年提醒                continue;            }            ReminderPlan plan = new ReminderPlan();            plan.setRelationshipId(ship.getId());            plan.setDaysBefore(bf);            plan.setReminderDate(data);            //通知类型：0-提醒用户；1-发送祝贺            plan.setReminderType(0);            plan.setExecutionStatus(0);            plans.add(plan);        }        //是否替我祝贺        //持久化计划数据        //plans空值处理        return mapper.batchAdd(plans) > 0;    }////    @Resource//    private ReminderPlanMapper mapper;    @Override    public void update(List<ReminderPlan> plans) {        mapper.update(plans);    }    @Override    @Transactional    public void executePlan(LocalDate now) {        List<ReminderPlan> plans =mapper.ListUndoPlans(now);        if(CollUtil.isEmpty(plans)){//            log.info("当前没有执行计划");            return;        }        for(ReminderPlan plan :plans) {//            log.info("开始执行计划：{}", plan);            plan.setExecutionStatus(1);            //发送邮件            mapper.update(plans);            //todo 将发送记录保存下来        }    }}